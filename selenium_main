from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver import ActionChains
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options



#（0）
# 创建一个浏览器对象
browser=webdriver.Chrome()


# 创建一个隐式浏览器对象
path = 'E:\Anaconda3\Scripts\chromedriver.exe'
chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--disable-gpu')
browser_1 = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)

try:
    browser.get('http://www.baidu.com/')
    input=browser.find_elements_by_id('kw')[0]
    input.send_keys('Python')
    input.send_keys(Keys.ENTER)
    wait=WebDriverWait(browser,10)
    wait.until(EC.presence_of_element_located((By.ID,'content_left')))
    print(browser.current_url)
    print(browser.get_cookies())
    print(browser.page_source)
except TimeoutException:
    browser.close()






# # 面向对象编程思想的selenium设计
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.wait import WebDriverWait
# from selenium.webdriver.chrome.options import Options
#
# class test():
#     def __init__(self):
#         path = 'E:\Anaconda3\Scripts\chromedriver.exe'
#         chrome_options = Options()
#         chrome_options.add_argument('--headless')
#         chrome_options.add_argument('--disable-gpu')
#         self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)
#
#     def my_request(self):
#         self.browser.get('http://www.baidu.com/')
#         input = self.browser.find_elements_by_id('kw')[0]
#         return input
#
#     def my_input(self,input):
#         input.send_keys('Python')
#         input.send_keys(Keys.ENTER)
#
#     def my_print(self):
#         wait = WebDriverWait(self.browser, 10)
#         wait.until(EC.presence_of_element_located((By.ID, 'content_left')))
#         print(self.browser.current_url)
#         print(self.browser.get_cookies())
#         print(self.browser.page_source)
#
# if __name__=='__main__':
#     chrome=test()
#     input=chrome.my_request()
#     chrome.my_input(input)
#     chrome.my_print()
# # 可见，selenium模块的强大能力，即可以使用面向对象编程的思想，将一个Class类与一个浏览器实例browser对应起来
# # 在__init__中声明一些指定参数、创建一个browser对象
# # 将针对browser的操作集成在Class类的不同方法下
# # 例如上例：
# # my_requeset方法使browser对象访问指定URL；
# # my_input从当前页面中找到指定的节点并返回；
# # my_print只负责获取browser页面内的信息并输出；













# #（1）
# # 查找并获得某个节点（某些节点）
# input=browser.find_elements_by_name('p')
# input=browser.find_elements_by_id('kw')
# input=browser.find_elements_by_class_name('foo’)
# input=browser.find_element_by_tag_name('h1')
#
# input=browser.find_elements_by_css_selector('#p')
# input=browser.find_elements_by_xpath('//*[@id='q']')
#
# input=browser.find_elements_by_link_text('Sign In')
# input=browser.find_elements_by_partial_link_text('Sign')
# # 按节点内的文本内容查找：
# # 第一个方法是精确查找，节点的文本必须只有Sign In
# # 第二个方法是存在查找，只要求节点内的文本包含Sign
#
#
# input=browser.find_element(By.ID,'kw')
# input=browser.find_elements(By.ID,'kw')
# # By.NAME、By.ID、By.CLASS_NAME、By.TAG_NAME、By.CSS_SELECTOR、By.XPATH、By.LINK_TEXT、By.PARTIAL_LINK_TEXT




# #（2）
# # 节点交互
# # 对于输入框类型节点input
# # input.send_keys('python')
# # input.clear()
# # input.send_keys(Keys.ENTER)  这个语句就相当于针对这个输入框，按下ENTER键
# # 对于按钮节点button
# # button.click()
#
#
# # 浏览器交互
# # browser.back()
# # 浏览器页面后退
# # browser.forward()
# # 浏览器页面前进
#
# # 获取浏览器当前cookies
# print(browser.get_cookies())
# # 浏览器新增cookies
# # 注意，输入参数为字典，而浏览器内记载的cookies也是字典；
# # 这个函数并不会将两个字典合并，函数会将输入参数补充一些必要的键值对
# # 并将两个字典都保存在browser内部
# browser.add_cookie({'name':'name_1','domain':'www.zhihu.com','value':'germey'})
#
# # 删除浏览器的cookies
# browser.delete_cookie('name_1')
# # 删除指定name的字典，其中name为字典内的值
# browser.delete_all_cookies()
# # 删除浏览器所有cookies（删除所有字典）
#
#
# # 浏览器的选项卡管理
# # 在browser=webdriver.Chrome()时，创建一个浏览器对象的同时默认创建一个选项卡，此时browser指向这个选项卡
# # 事实上，browser.get(url)时，是browser通过当前指向的选项卡进行get请求，get本身并不会创建选项卡
#
# browser.execute_script('window.open()')
# # 创建一个新的选项卡
# print(browser.window_handles)
# # 获得browser当前打开的所有选项卡的代号组成的列表
# browser.switch_to_window(browser.window_handles[1])
# # 跳转至第二个选项卡







# #（3）
# # 获取节点标签名称
# print(input.tag_name)
# # 获取节点属性
# input.get_attribute('class')
# # 获取节点文本值
# print(input.text)
# # 获取节点对应框的宽&高
# print(input.size)
# # 获取节点对应框在页面中的相对位置
# print(input.location)







# #（4）
# # 动作链
# browser.switch_to.frame('iframeResult')
# # 通过browser.find_elements函数得到两个节点：source、target
# # 考虑将source节点拖拽至target节点
# actions=ActionChains(browser)
# actions.drag_and_drop(source,target)
# actions.perform()
#
# browser.execute_script('') # 接受一个JavaScript语句




# #（5）
# # 切换父子级页面
# # 当selenium利用get打开页面后，默认在父级Frame中操作，如果想获取子级Frame中节点，需要先切换到子级Frame中
# # 查看源代码，如果在html节点下：<iframe>和<head><body>处在同级目录下
#
# browser.switch_to.frame('iframeResult')
# # 进入子级frame
# browser.switch_to.parent_frame()
# # 返回父级frame





# #（6）
# # 显示等待，指定要查找的节点及这个节点的最长等待时间。
# # 如果该节点在规定时间内加载出来了这个节点，就返回查找的节点
# # 如果过了规定时间依然没有加载出该节点，则抛出超时异常
# try:
#     wait=WebDriverWait(browser,10)
#     input=wait.until(EC.presence_of_element_located((By.ID,'q')))
#     button=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,'.btn-search')))
# except:
#     print('something is worry')
#
#
#
#
# # EC、ExceptCondition即预期条件，常作为until/until_not函数的输入参数
# # 以下的所有函数，其输入参数都【区分大小写】
#
#
# # EC.title_is(title)
# # 要求完全一致
# # EC.title_contains(title)
# # 要求包含预期标题的字段即可
#
#
# # EC.url_to_be(url)
# # 要求与预期精确匹配，成功返回True
# # EC.url_matches(pattern)
# # 要求与预期模式精确匹配，成功返回True
# # EC.url_contains(url)
# # 要求包含预期的url片段，成功返回True
#
#
# # 这两个条件验证元素是否出现，传入的参数都是元组类型的locator，比如(By.ID, 'kw')
# # 一个只要一个符合条件的元素加载出来就通过；另一个必须所有符合条件的元素都加载出来才行
# # EC.presence_of_element_located(locator)
# # EC.presence_of_all_elements_located(locator)
#
#
# # 这个条件判断元素是否可点击
# # EC.element_to_be_clickable(locator)
#
#
# # 这两个条件判断某段文本是否出现在某元素中，一个判断元素的text，一个判断元素的value属性
# # 其中text_类似于str(page)这样子，即获取文本中有单词page的节点
# # EC.text_to_be_present_in_element(locator,text_)
# # EC.text_to_be_present_in_element_value(locator,text_)
#
#
# # 验证是否存在至少一个可见元素，前两个传入参数是元组类型的locator
# # EC.visibility_of_element_located(locator)
# # EC.invisibility_of_element_located(locator)
#
#
# # 这个条件判断frame是否可切入，可传入locator元组或者直接传入定位方式：id、name、index或WebElement
# # 检查传入的frame是否可以被选择，如果frame可用就跳转
# # EC.frame_to_be_available_and_switch_to_it(locator)
#
#
# # 这个条件判断是否有alert（警报）出现，这个函数不需要输入参数
# # EC.alert_is_present
#
#
# # 这四个条件判断元素是否被选中
# # 第一个条件传入WebElement对象，第二个传入locator元组
# # 第三个传入WebElement对象以及状态，相等返回True，否则返回False#第四个传入locator以及状态，相等返回True，否则返回False
# # EC.element_to_be_selected(element)
# # EC.element_located_to_be_selected(locator)
# # EC.element_selection_state_to_be(locator,is_selected) # is_selected是布尔值
# # EC.element_located_selection_state_to_be




