import pymongo
from bson.objectid import ObjectId

# (1)
# 连接到MongoDB
client=pymongo.MongoClient(host='localhost',port=27017)
# 在MongoDB中'localhost'，即被默认为'127.0.0.1'；所以这里写哪个都是一样的

# 在一个(localhost:27017)下有多个数据库
# 指定数据库test
db=client['test']

# 在一个数据库下有多个表
# 指定表students
collection=db['students']


# (2)
# 插入单个数据
dict={'id':'20170101','name':'我打尼玛的','age':20,'gender':'male'}
result_one=collection.insert_one(dict)
print(result_one.inserted_id)
#
# # 插入一组数据
# dict1={'id':'20170102','name':'泰达米尔','age':21,'gender':'male'}
# dict2={'id':'20170103','name':'艾希','age':22,'gender':'male'}
# result_many=collection.insert_many([dict1,dict2])
# print(result_many.inserted_ids)



# # (3)
# # 查询数据
# result_research1=collection.find_one({'name':'艾希'})
# print(result_research1)
# result_research2=collection.find_one({'_id':ObjectId('5e683e7cbf60a35b4ff61aa5')})
# print(result_research2)
# #
# #
# # 一般的查询条件
# # $lt  小于        {'age':{'$lt':20}}       查询属性age小于20的全部情况
# # $lte 小于等于    {'age':{'$lte':20}}      查询属性age小于等于20的全部情况
# # $gt  大于        {'age':{'$gt':20}}       查询属性age大于20的全部情况
# # $gte 大于等于    {'age':{'$gte':20}}      查询属性age大于等于20的全部情况
# # $ne  不等于      {'age':{'$ne':20}}       查询属性age不等于20的全部情况
# # $in  在范围内    {'age':{'$in':[21,22]}}  查询属性age在[21,22]的全部情况
# # $nin 不在范围内  {'age':{'$nin':[20，21]}} 查询属性age不在[20,21]的全部情况
# # 注意，这里的参数[20,21,22]并不是区间，而是列表，即查询，age的属性值在列表中的项
# # result_research3=collection.find({'age':{'$in':[20,21,22]}})
# # for resul_3 in result_research3:
# #     print(resul_3)
# #
# #
# # 功能查询条件
# # $regex  匹配正则表达式  {'name':{'$regex':'^[\u4e00-\u9fa5]{0,}$.*'}} 【其中^[\u4e00-\u9fa5]{0,}$匹配汉字】
# # $exists 属性是否存在    {'name':{'$exists':True}}
# # $type   属性值类型判断  {'age':{'$type':'int'}}
# # $mod    数字模操作      {'age':{'$mod':[5,1]}}  年龄mod5余1
# # $text   文本查询        {'$text':{'$search':'艾希'}}   这一条不是很明白
# result_research4=collection.find({'$text':{'$search':'艾希'}})
# for resul_4 in result_research4:
#     print(resul_4)
#
# # 对查询结果计数
# result_count=collection.find({'name':{'$regex':'^[\u4e00-\u9fa5]{0,}$.*'}})
# print(result_count.count())
#
# 显示前20条数据
# date = my_collection.find().limit(20)
# 跳过前2条显示20条数据
# date = my_collection.find().limit(20).skip(2)



# (4)
# 对查询数据排序
# 指定升序
result_sorted1=collection.find().sort('age',pymongo.ASCENDING)
for sort1 in result_sorted1:
    print(sort1)

# 指定降序
result_sorted2=collection.find().sort('age',pymongo.DESCENDING)
for sort2 in result_sorted2:
    print(sort2)



#（4.5）
# 将两个item实例对象并在一起
#     def process_item(self, item, spider):
#         client = pymongo.MongoClient(mongo_uri)
#         db = client[mongo_db]
#         db[collection].create_index([('id', pymongo.ASCENDING)])
#
#         if isinstance(item, UserItem):
#             self.db[item.collection].update({'id': item.get('id')}, {'$set': item}, True)
#         # 将UserItem实例对象存入数据表db[users]中
#
#         if isinstance(item, UserRelationItem):
#             self.db[item.collection].update({'id': item.get('id')},
#                                             {'$addToSet':
#                                                  {'follows': {'$each': item['follows']},
#                                                   'fans': {'$each': item['fans']}
#                                                   }
#                                              }, True)
#         # 将UserRelationItem实例对象并入数据表db[users]中，以item的id字段为标志
#
# 其中UserItem的实例对象在创建时有除了'fans'、'follows'外，都已经被设置好了
# 其中UserRelationItem的实例对象在创建时只有'id'、'fans'、'follows'三个字段
# 两个item具有相同的collection属性，所以创建db[collection]时，这两个item就会共用一个数据表
# 对db[collection]调用create_index([('id', pymongo.ASCENDING)])，从而两个item实例对象合并时以“id”为标志
#
# class UserItem(Item):
#     collection = 'users'
#     id = Field()
#     # id 就是用户的 ID
#     name = Field()
#     avatar = Field()
#     cover = Field()
#     gender = Field()
#     description = Field()
#     fans_count = Field()
#     follows_count = Field()
#     weibos_count = Field()
#     verified = Field()
#     verified_reason = Field()
#     verified_type = Field()
#     follows = Field()
#     fans = Field()
#     crawled_at = Field()
#
# class UserRelationItem(Item):
#     collection = 'users'
#     id = Field()
#     follows = Field()
#     fans = Field()
#
# 更多操作符：https://docs.mongodb.com/manual/reference/operator/update/addToSet/




#（5）
# 更新，符合查询条件的第一项
# 该方法接受两个参数：查询条件(第一个)、更新条件（第二个）；
# 返回两个参数：复合查询条件的个数、按照更新条件进行更新的个数

result_update1=collection.update_one({'name':'艾希'},{'$set':{'age':22}})
# 只修改符合查询条件的第一项、更新条件为“将age属性设置为22”
print(result_update1.matched_count,result_update1.modified_count)

result_update2=collection.update_many({'name':'艾希'},{'$inc':{'age':-1}})
# 修改符合查询条件的全部项、更新条件为“将age属性加'-1'”
print(result_update2.matched_count,result_update2.modified_count)

# class UserItem(Item):
#     collection = 'users'
#     id = Field()
#     # id 就是用户的 ID
#     name = Field()
#     avatar = Field()
#     cover = Field()
#     gender = Field()
#     description = Field()
#     fans_count = Field()
#     follows_count = Field()
#     weibos_count = Field()
#     verified = Field()
#     verified_reason = Field()
#     verified_type = Field()
#     follows = Field()
#     fans = Field()
#     crawled_at = Field()
#
# class UserRelationItem(Item):
#     collection = 'users'
#     id = Field()
#     follows = Field()
#     fans = Field()
#
# 将两个item实例对象并在一起
#     def process_item(self, item, spider):
#         client = pymongo.MongoClient(mongo_uri)
#         db = client[mongo_db]
#         db[collection].create_index([('id', pymongo.ASCENDING)])
#
#         if isinstance(item, UserItem):
#             self.db[item.collection].update({'id': item.get('id')}, {'$set': item}, True)
#
#
#         if isinstance(item, UserRelationItem):
#             self.db[item.collection].update({'id': item.get('id')},
#                                             {'$addToSet':
#                                                  {'follows': {'$each': item['follows']},
#                                                   'fans': {'$each': item['fans']}
#                                                   }
#                                              }, True)
#
# 其中item['follows']=[{'id':'20181601','name':'艾希'},{'id':'20181602','name':'艾克'}]，其中(id,name)都是父页面关注的用户的信息
# 其中item.get('id')、item['fans']=[]
# $addToSet 操作符可以向列表类型的字段插入数据同时去重，接下来它的值就是需要操作的字段名称
#    （这里的“列表类型字段”指的是，“已经插入表中的UserItem实例对象”的'follows'字段和'fans'字段）
#    （要插入的数据就是{'$each': item['follows']}和{'$each': item['fans']}）
# $each 操作符对需要插入的列表数据进行了遍历，这样就可以逐条插入用户的关注或粉丝数据到指定的字段了
#
#
# 更多操作符：https://docs.mongodb.com/manual/reference/operator/update/addToSet/



#（6）
# 删除操作
result_remove1=collection.delete_one({'name':'艾希'})
print(result_remove1.delete_count)
result_remove2=collection.delete_many({'name':'艾希'})
print(result_remove2.delete_conut)


# (7)
# 针对索引的操作
# creat_index()
# creat_indexes()
# drop_index()




