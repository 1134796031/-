from Cookies池_存储模块 import RedisClient
import json
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
import time


class WeiboCookiesGenerator():
    def __init__(self,website):
        self.accounts_db=RedisClient('accounts','weibo')
        self.cookies_db=RedisClient('cookies','weibo')
        path = 'E:\Anaconda3\Scripts\chromedriver.exe'
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--disable-gpu')
        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)
        self.login='https://login.taobao.com/'
        self.login_fail='https://login.taobao.com/member/login.jhtml'
        self.login_succ='https://www.taobao.com/'


    def open(self,username,password):
        self.browser.get(self.login)
        input_1=self.browser.find_element_by_css_selector('input#TPL_username_1.login-text.J_UserName.J_Focused')
        input_2=self.browser.find_element_by_css_selector('span#J_StandardPwd input#TPL_password_1.login-text')
        button=self.browser.find_element_by_css_selector('button#J_SubmitStatic.J_Submit')
        input_1.clear()
        input_2.clear()
        input_1.send_keys(username)
        input_2.send_keys(password)
        button.click()
        # 点击登录后，页面会跳转至“密码错误页面”或“登录成功页面”
        # 基于此设置了password_error方法、login_successfully方法


    def password_error(self):
        try :
            wait = WebDriverWait(self.browser, 10)
            wait.until(EC.url_to_be(self.login_fail))
            return True
        except:
            return False
    # 如密码错误，返回True

    def login_successfully(self):
        try:
            wait = WebDriverWait(self.browser, 10)
            wait.until(EC.url_to_be(self.login_succ))
            return True
        except:
            return False
    # 如登录成功，返回True

    def get_cookies(self):
        return self.browser.get_cookies()
    # 返回当前浏览器打开网页的cookies

    def new_cookies(self,username,password):
        self.open()
        if self.password_error():
            return {
                'status': 2,
                'content': ' 用户名或密码错误 '
            }
        # 如果不需要验证码直接登录成功
        if self.login_successfully():
            cookies = self.get_cookies()
            return {
                'status': 1,
                'content': cookies
            }

        image = self.get_image('captcha.png') # 本次登录遇到的验证码保存为captcha，并返回实例对象image
        numbers = self.detect_image(image)    # 将图像image放在已经建立好的图像库中，并寻找匹配的拖动路径numbers
        self.move(numbers)                    # 按照list类型numbers作为路径拖动验证码
        if self.login_successfully():
            cookies = self.get_cookies()
            return {
                'status': 1,
                'content': cookies
            }
        else:
            return {
                'status': 3,
                'content': ' 登录失败 '
            }
        # 输入用户名和密码，返回字典类型
        # 第一个键值对反映了该用户的状态以及是否成功获得cookies，第二个键值对为该用户的cookies信息

    def run(self):
        accounts_usernames=self.accounts_db.usernames()
        cookies_usernames=self.cookies_db.usernames()
        for username in accounts_usernames:
            if not username in cookies_usernames:
                password = self.accounts_db.get(username)
                print(' 正在生成 Cookies', ' 账号 ', username, ' 密码 ', password)
                result = self.new_cookies(username, password)
                # 成功获取
                if result.get('status') == 1:
                    cookies = result.get('content')
                    print(' 成功获取到 Cookies', cookies)
                    if self.cookies_db.set(username, json.dumps(cookies)):
                        print(' 成功保存 Cookies')
                # 密码错误，移除账号
                elif result.get('status') == 2:
                    print(result.get('content'))
                    if self.accounts_db.delete(username):
                        print(' 成功删除账号 ')
                else:
                    print(result.get('content'))
    # 最终以json格式将cookies保存在cokkies_db中；
    # 如果账户密码错误，则将该账号删除；















