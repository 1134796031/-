MAX_SCORE = 100
MIN_SCORE = 0
INITIAL_SCORE = 10
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6379
REDIS_PASSWORD = None
REDIS_KEY = 'proxies'
# 存储方式采用redis中的有序集合数据库
# 键名为REDIS_KEY = 'proxies'，对应的数据库为有序集合

import redis
from random import choice


class RedisClient(object):
    def __init__(self, host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD):
        """
        初始化
        :param host: Redis 地址
        :param port: Redis 端口
        :param password: Redis 密码
        REDIS_DB 数据库代号
        """
        self.db = redis.StrictRedis(host=host,port=port,password=password,encoding='utf-8',decode_responses=True)

    def add(self, proxy, score=INITIAL_SCORE):
        """
        添加代理，设置分数为最高
        :param proxy: 代理
        :param score: 分数
        :return: 添加结果
        """
        if not self.db.zscore(REDIS_KEY, proxy):
            mapping={proxy:score}
            return self.db.zadd(REDIS_KEY,mapping)
# proxy为有序集合中某个项的名称，第一个方法返回该项的分数，由此判断该项是否存在
# 如果不存在，则以分数score存入有序集合

    def random(self):
        """
        随机获取有效代理，首先尝试获取最高分数代理，如果不存在，按照排名获取，否则异常
        :return: 随机代理
        """
        result = self.db.zrangebyscore(REDIS_KEY, MAX_SCORE, MAX_SCORE)
        if len(result):
            return choice(result)
        else:
            result = self.db.zrevrange(REDIS_KEY, 0, 100)
            if len(result):
                return choice(result)
# 从分数为100的项中随机取一个
# 如果没有分数为100的项，则从按分数排名前100的项中随机取一个

    def decrease(self, proxy):
        """
        代理值减一分，小于最小值则删除
        :param proxy: 代理
        :return: 修改后的代理分数
        """
        score = self.db.zscore(REDIS_KEY, proxy)
        if score > MIN_SCORE:
            print(' 代理 ', proxy, ' 当前分数 ', score, ' 减 1')
            return self.db.zincrby(REDIS_KEY, proxy, -1)
        else:
            print(' 代理 ', proxy, ' 当前分数 ', score, ' 移除 ')
            return self.db.zrem(REDIS_KEY, proxy)
# 只有当某个代理访问失败时，会对该代理proxy调用decrease方法；
# 如果该代理分数大于10则将分数减1，如果该代理分数小于等于10则从redis数据库中移除该代理

    def exists(self, proxy):
        """
        判断是否存在
        :param proxy: 代理
        :return: 是否存在
        """
        return not self.db.zscore(REDIS_KEY, proxy) == None
# 返回一个BOOL值，代表代理proxy是否在指定的redis数据库中

    def max(self, proxy):
        """
        将代理设置为 MAX_SCORE
        :param proxy: 代理
        :return: 设置结果
        """
        print(' 代理 ', proxy, ' 可用，设置为 ', MAX_SCORE)
        mapping={proxy:MAX_SCORE}
        return self.db.zadd(REDIS_KEY,mapping)
# 当一个代理proxy访问成功时会调用这个模块

    def count(self):
        """
        获取数量
        :return: 数量
        """
        return self.db.zcard(REDIS_KEY)
# 获取当前代理总数

    def all(self):
        """
        获取全部代理
        :return: 全部代理列表
        """
        return self.db.zrangebyscore(REDIS_KEY, MIN_SCORE, MAX_SCORE)
# 获取分数在10到100内的全部代理

